::selection {
  color: $selectionTextColor;
  background: $selectionTextBgColor;
}

.fill-current{fill: currentColor;}
.stroke-current{stroke: currentColor;}

@mixin getTextColors($bp: $breakPoint) {
  @each $clr in $textColors {
    @if(nth($clr, 4) == 'states'){
      @each $state in $states {
        @if(nth($state, 1) == 'on-active'){
          .#{$bp}#{nth($state, 1)}-#{nth($clr, 1)} {
            &-#{nth($clr, 2)}.#{nth($state, 2)} {
              @if(nth($clr, 6) != null){
                #{nth($clr, 6)}: #{nth($clr, 3)};
              }@else {
                color: nth($clr, 3);
              }
            }
          }
        }@else{
          .#{$bp}#{nth($state, 1)}#{nth($clr, 1)} {
             &-#{nth($clr, 2)}#{nth($state, 2)} {
              @if(nth($clr, 6) != null){
                #{nth($clr, 6)}: #{nth($clr, 3)};
              }@else {
                color: nth($clr, 3);
                &, &::-webkit-input-placeholder {
                  color: nth($clr, 3);
                }
                
                &, &::-moz-placeholder {
                  color: nth($clr, 3);
                  // opacity: 1;
                }
                
                &, &:-ms-input-placeholder {
                  color: nth($clr, 3);
                }
                
                &, &:-moz-placeholder {
                  color: nth($clr, 3);
                }
                &:invalid, &.not-selected {
                  color: nth($clr, 3);
                }
                option {
                  &[value=""] {
                    color: nth($clr, 3) !important;
                  }
                }
              }
            }
          }
          .select select {
            &.#{$bp}#{nth($state, 1)}#{nth($clr, 1)} {
              &-#{nth($clr, 2)}#{nth($state, 2)} {
               @if(nth($clr, 6) != null){
                 #{nth($clr, 6)}: #{nth($clr, 3)};
               }@else {
                 color: nth($clr, 3);
                 &, &::-webkit-input-placeholder {
                   color: nth($clr, 3);
                 }
                 
                 &, &::-moz-placeholder {
                   color: nth($clr, 3);
                   opacity: 1;
                 }
                 
                 &, &:-ms-input-placeholder {
                   color: nth($clr, 3);
                 }
                 
                 &, &:-moz-placeholder {
                   color: nth($clr, 3);
                 }
                 &:invalid, &.not-selected {
                   color: nth($clr, 3);
                 }
                 option {
                  &[value=""] {
                    color: nth($clr, 3) !important;
                  }
                }
               }
             }
           }  
          }
          @if(nth($clr, 5) == 'parent'){
            .#{$bp}#{nth($state, 1)}#{nth($clr, 1)}-parent#{nth($state, 2)} {
              .#{nth($clr, 1)}-child-#{nth($clr, 2)}{
                @if(nth($clr, 6) != null){
                  #{nth($clr, 6)}: #{nth($clr, 3)};
                }@else {
                  color: nth($clr, 3);
                }
              }
            }
          }
        }
      }  
    }@else{
      .#{$bp}#{nth($clr, 1)} {
        &-#{nth($clr, 2)} {
          @if(nth($clr, 6) != null){
            #{nth($clr, 6)}: #{nth($clr, 3)};
          }@else {
            color: nth($clr, 3);
            &::-webkit-input-placeholder {
              color: nth($clr, 3);
            }
            
            &::-moz-placeholder {
              color: nth($clr, 3);
              opacity: 1;
            }
            
            &:-ms-input-placeholder {
              color: nth($clr, 3);
            }
            
            &:-moz-placeholder {
              color: nth($clr, 3);
            }
            &:invalid, &.not-selected {
              color: nth($clr, 3);
            }
            option {
              &[value=""] {
                color: nth($clr, 3) !important;
              }
            }
          }
        }
      }
      .select select {
        &.#{$bp}#{nth($clr, 1)} {
          &-#{nth($clr, 2)} {
            @if(nth($clr, 6) != null){
              #{nth($clr, 6)}: #{nth($clr, 3)};
            }@else {
              color: nth($clr, 3);
              &::-webkit-input-placeholder {
                color: nth($clr, 3);
              }
              
              &::-moz-placeholder {
                color: nth($clr, 3);
                opacity: 1;
              }
              
              &:-ms-input-placeholder {
                color: nth($clr, 3);
              }
              
              &:-moz-placeholder {
                color: nth($clr, 3);
              }
              &:invalid, &.not-selected {
                color: nth($clr, 3);
              }
              option {
                &[value=""] {
                  color: nth($clr, 3) !important;
                }
              }
            }
          }
        }
      }
      @if(nth($clr, 5) == 'parent'){
        .#{$bp}#{nth($clr, 1)}-parent {
          .#{nth($clr, 1)}-child-#{nth($clr, 2)} {
            @if(nth($clr, 6) != null){
              #{nth($clr, 6)}: #{nth($clr, 3)};
            }@else {
              color: nth($clr, 3);
            }
          }
        }
      }
    }
    
  }
}
@mixin getBgColors($bp: $breakPoint) {
  @each $clr in $bgColors {
    @if(nth($clr, 4) == 'states'){
      @each $state in $states {
        @if(nth($state, 1) == 'on-active'){
          .#{$bp}#{nth($state, 1)}-#{nth($clr, 1)} {
            &-#{nth($clr, 2)}.#{nth($state, 2)} {
              @if(nth($clr, 6) != null){
                #{nth($clr, 6)}: #{nth($clr, 3)};
              }@else {
                background-color: #{nth($clr, 3)};
              }
            }
          }  
        }
        @else{
          .#{$bp}#{nth($state, 1)}#{nth($clr, 1)} {
            &-#{nth($clr, 2)}#{nth($state, 2)} {
              @if(nth($clr, 6) != null){
                #{nth($clr, 6)}: #{nth($clr, 3)};
              }@else {
                background-color: #{nth($clr, 3)};
              }
            }
          }
          @if(nth($clr, 5) == 'parent'){
            .#{$bp}#{nth($state, 1)}#{nth($clr, 1)}-parent#{nth($state, 2)} {
              .#{nth($clr, 1)}-child-#{nth($clr, 2)} {
                @if(nth($clr, 6) != null){
                  #{nth($clr, 6)}: #{nth($clr, 3)};
                }@else {
                  background-color: #{nth($clr, 3)};
                }
              }
            }
          }
        }
      }
    }@else{
      .#{$bp}#{nth($clr, 1)} {
        &-#{nth($clr, 2)} {
          @if(nth($clr, 6) != null){
            #{nth($clr, 6)}: #{nth($clr, 3)};
          }@else {
            background-color: #{nth($clr, 3)};
          }
        }
      }
      @if(nth($clr, 5) == 'parent'){
        .#{$bp}#{nth($clr, 1)}-parent {
          .#{nth($clr, 1)}-child-#{nth($clr, 2)} {
            @if(nth($clr, 6) != null){
              #{nth($clr, 6)}: #{nth($clr, 3)};
            }@else {
              background-color: #{nth($clr, 3)};
            }
          }
        }
      }
    }
  }
}
@mixin getBorderColors($bp: $breakPoint) {
  @each $clr in $borderColors {
    @if(nth($clr, 4) == 'states'){
      @each $state in $states {
        @if(nth($state, 1) == 'on-active'){
          .#{$bp}#{nth($state, 1)}-#{nth($clr, 1)} {
            &-#{nth($clr, 2)}.#{nth($state, 2)} {
              border-color: #{nth($clr, 3)};
            }
          }
        }
        @else{
          .#{$bp}#{nth($state, 1)}#{nth($clr, 1)} {
            &-#{nth($clr, 2)}#{nth($state, 2)} {
              border-color: #{nth($clr, 3)};
            }
          }
          @if(nth($clr, 5) == 'parent'){
            .#{$bp}#{nth($state, 1)}#{nth($clr, 1)}-parent#{nth($state, 2)} {
              .#{nth($clr, 1)}-child-#{nth($clr, 2)} {
                border-color: #{nth($clr, 3)};
              }
            } 
          }
        }
      }
    }@else{
      .#{$bp}#{nth($clr, 1)} {
        &-#{nth($clr, 2)} {
          border-color: #{nth($clr, 3)};
        }
      }
      @if(nth($clr, 5) == 'parent'){
        .#{$bp}#{nth($clr, 1)}-parent {
          .#{nth($clr, 1)}-child-#{nth($clr, 2)} {
            border-color: #{nth($clr, 3)};
          }
        } 
      }
    }
  }
}